import eqlib as eq
import numpy as np
import hyperjet as hj
from numpy.testing import assert_allclose, assert_equal
from ieee import ieee_g4
import pytest

if __name__ == '__main__':
    import sys
    pytest.main(sys.argv)


def test_ieee_g4():
    problem = ieee_g4()

    problem.eval(problem.x)

    assert_allclose(problem.f, -28529.2076)
    assert_allclose(problem.df, [60.6925338, 0.0, 364.3341196, 0.0, 83.56891])

    g = problem.g
    dg = problem.dg.toarray()

    assert_allclose(g, [-0.5236474, -91.4763526, -7.9948984, -12.0051016, -4.6850688, -0.3149312])
    assert_allclose(dg, [
        [+0.0219170, +0.1592024, -0.0617484, +0.062620, +0.1410802],
        [-0.0219170, -0.1592024, +0.0617484, -0.062620, -0.1410802],
        [+0.1138290, +0.4992376, +0.1483284, +0.000000, +0.2710046],
        [-0.1138290, -0.4992376, -0.1483284, +0.000000, -0.2710046],
        [+0.0426598, +0.0000000, +0.3239403, +0.064889, +0.1598884],
        [-0.0426598, +0.0000000, -0.3239403, -0.064889, -0.1598884],
    ])

    weighted_grad_gs = -dg / g[:, None]

    assert_allclose(weighted_grad_gs, [
        [+4.18544998e-02, +3.04025953e-01, -1.17919806e-01, +1.19584285e-01, +2.69418315e-01],
        [-2.39591975e-04, -1.74036672e-03, +6.75020355e-04, -6.84548500e-04, -1.54225869e-03],
        [+1.42377044e-02, +6.24445209e-02, +1.85528812e-02, +0.00000000e+00, +3.38971912e-02],
        [-9.48171901e-03, -4.15854540e-02, -1.23554473e-02, +0.00000000e+00, -2.25741197e-02],
        [+9.10547995e-03, +0.00000000e+00, +6.91431255e-02, +1.38501701e-02, +3.41272256e-02],
        [-1.35457522e-01, +0.00000000e+00, -1.02860657e+00, -2.06041828e-01, -5.07693109e-01],
    ])

    g_lb = problem.x_lower_bounds - problem.x
    g_ub = problem.x - problem.x_upper_bounds

    assert_allclose(g_lb, [-22, -5, -7, -8, -1])
    assert_allclose(g_ub, [-2, -7, -11, -10, -17])

    weighted_grad_glbs = np.diag(1 / g_lb)
    weighted_grad_gubs = np.diag(-1 / g_ub)

    assert_allclose(weighted_grad_glbs, [
        [-0.04545455, -0.0, -0.00000000, -0.000, -0.0],
        [-0.00000000, -0.2, -0.00000000, -0.000, -0.0],
        [-0.00000000, -0.0, -0.14285714, -0.000, -0.0],
        [-0.00000000, -0.0, -0.00000000, -0.125, -0.0],
        [-0.00000000, -0.0, -0.00000000, -0.000, -1.0],
    ])

    assert_allclose(weighted_grad_gubs, [
        [0.5, 0.00000000, 0.00000000, 0.0, 0.00000000],
        [0.0, 0.14285714, 0.00000000, 0.0, 0.00000000],
        [0.0, 0.00000000, 0.09090909, 0.0, 0.00000000],
        [0.0, 0.00000000, 0.00000000, 0.1, 0.00000000],
        [0.0, 0.00000000, 0.00000000, 0.0, 0.05882353],
    ])

    dg = np.sum(weighted_grad_gs, axis=0) + 1 / g_lb - 1 / g_ub

    assert_allclose(dg, [0.37456431, 0.2660018, -1.12245884, -0.09829192, -1.13554323])
